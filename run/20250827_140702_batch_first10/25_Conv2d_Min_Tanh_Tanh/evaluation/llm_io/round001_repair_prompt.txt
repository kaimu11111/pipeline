You are a senior CUDA-extension developer.
Your job is to **FIX** the compilation or runtime errors in the Python script
shown below.

OUTPUT RULES (STRICT) ────────────────────────────────────────────────
1. Inside the block, follow **exactly** this order:
   1. Imports – `torch`, `torch.nn`, `load_inline`.
   2. `source` – triple‑quoted CUDA string(s) (kernel + host wrapper).
   3. `cpp_src` – prototypes for *all* kernels you expose.
   4. **One** `load_inline` call per kernel group.
   5. `class ModelNew(nn.Module)` – mirrors original inputs/outputs but calls
      your CUDA kernels.
2. **Do NOT include** testing code, `if __name__ == "__main__"`, or extra prose.

────────────────────────────────────────
ERROR LOG
────────────────────────────────────────
/home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/utils/cpp_extension.py:2356: UserWarning: TORCH_CUDA_ARCH_LIST is not set, all archs for visible cards are included for compilation. 
If this is not desired, please set os.environ['TORCH_CUDA_ARCH_LIST'].
  warnings.warn(
Error building extension 'min_double_tanh': [1/3] c++ -MMD -MF main.o.d -DTORCH_EXTENSION_NAME=min_double_tanh -DTORCH_API_INCLUDE_EXTENSION_H -DPYBIND11_COMPILER_TYPE=\"_gcc\" -DPYBIND11_STDLIB=\"_libstdcpp\" -DPYBIND11_BUILD_ABI=\"_cxxabi1016\" -isystem /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include -isystem /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/csrc/api/include -isystem /home/wan00559/miniconda3/envs/maxk/include/python3.11 -D_GLIBCXX_USE_CXX11_ABI=1 -fPIC -std=c++17 -O3 -c /home/wan00559/.cache/torch_extensions/py311_cu126/min_double_tanh/main.cpp -o main.o 
[2/3] /usr/bin/nvcc --generate-dependencies-with-compile --dependency-output cuda.cuda.o.d -DTORCH_EXTENSION_NAME=min_double_tanh -DTORCH_API_INCLUDE_EXTENSION_H -DPYBIND11_COMPILER_TYPE=\"_gcc\" -DPYBIND11_STDLIB=\"_libstdcpp\" -DPYBIND11_BUILD_ABI=\"_cxxabi1016\" -isystem /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include -isystem /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/csrc/api/include -isystem /home/wan00559/miniconda3/envs/maxk/include/python3.11 -D_GLIBCXX_USE_CXX11_ABI=1 -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr -gencode=arch=compute_75,code=compute_75 -gencode=arch=compute_75,code=sm_75 --compiler-options '-fPIC' -O3 -std=c++17 -c /home/wan00559/.cache/torch_extensions/py311_cu126/min_double_tanh/cuda.cu -o cuda.cuda.o 
[3/3] c++ main.o cuda.cuda.o -shared -L/home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/lib -lc10 -lc10_cuda -ltorch_cpu -ltorch_cuda -ltorch -ltorch_python -L/usr/lib64 -lcudart -o min_double_tanh.so
FAILED: min_double_tanh.so 
c++ main.o cuda.cuda.o -shared -L/home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/lib -lc10 -lc10_cuda -ltorch_cpu -ltorch_cuda -ltorch -ltorch_python -L/usr/lib64 -lcudart -o min_double_tanh.so
/usr/bin/ld: cuda.cuda.o: in function `PyInit_min_double_tanh':
tmpxft_003cc185_00000000-6_cuda.cudafe1.cpp:(.text+0x1620): multiple definition of `PyInit_min_double_tanh'; main.o:main.cpp:(.text+0xe10): first defined here
collect2: error: ld returned 1 exit status
ninja: build stopped: subcommand failed.

────────────────────────────────────────
OLD CODE (read-only)
────────────────────────────────────────
import torch
import torch.nn as nn
from torch.utils.cpp_extension import load_inline

# ------------------------------------------------------------------
# CUDA kernel + bindings
# ------------------------------------------------------------------
cuda_src = r"""
#include <torch/extension.h>
#include <cuda.h>
#include <cuda_runtime.h>
#include <cmath>

#define CUDA_KERNEL_LOOP(i, n) \
  for (int i = blockIdx.x * blockDim.x + threadIdx.x; i < (n); \
       i += blockDim.x * gridDim.x)

/*
    Fused kernel that
      1. takes the minimum over the channel dimension
      2. applies tanh twice
*/
__global__ void min_double_tanh_kernel(const float* __restrict__ x,
                                       float* __restrict__ out,
                                       const int N,
                                       const int C,
                                       const int H,
                                       const int W) {
    const int HW = H * W;
    const int stride = HW;           // distance between successive channels
    const int total = N * HW;        // threads cover (n, h, w) tuples

    CUDA_KERNEL_LOOP(idx, total) {
        int n  = idx / HW;
        int hw = idx % HW;
        int h  = hw / W;
        int w  = hw % W;

        // offset for (n, c=0, h, w)
        int base = ((n * C) * H + h) * W + w;
        float vmin = x[base];

        // channel-wise reduction
        for (int c = 1; c < C; ++c) {
            float v = x[base + c * stride];
            vmin = v < vmin ? v : vmin;
        }

        // two consecutive tanh
        vmin = tanhf(vmin);
        vmin = tanhf(vmin);

        // output memory is (N,1,H,W)
        out[((n * H) + h) * W + w] = vmin;
    }
}

at::Tensor min_double_tanh_cuda(at::Tensor x) {
    TORCH_CHECK(x.is_cuda(), "Input must reside on CUDA device");
    TORCH_CHECK(x.scalar_type() == at::kFloat, "Only float32 supported");
    TORCH_CHECK(x.dim() == 4, "Input must be 4-D NCHW");

    x = x.contiguous();
    const int N = x.size(0);
    const int C = x.size(1);
    const int H = x.size(2);
    const int W = x.size(3);

    auto out = torch::empty({N, 1, H, W}, x.options());

    const int threads = 256;
    const int blocks  = (N * H * W + threads - 1) / threads;

    min_double_tanh_kernel<<<blocks, threads>>>(
        x.data_ptr<float>(),
        out.data_ptr<float>(),
        N, C, H, W);

    cudaError_t err = cudaGetLastError();
    if (err != cudaSuccess)
        printf("CUDA kernel failed: %s\n", cudaGetErrorString(err));

    return out;
}

PYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {
    m.def("min_double_tanh_cuda", &min_double_tanh_cuda,
          "Channel-wise min followed by two tanh (CUDA)");
}
"""

cpp_src = "at::Tensor min_double_tanh_cuda(at::Tensor x);"

min_double_tanh = load_inline(
    name="min_double_tanh",
    cpp_sources=cpp_src,
    cuda_sources=cuda_src,
    functions=["min_double_tanh_cuda"],
    verbose=False,
    extra_cflags=["-O3"],
    extra_cuda_cflags=["-O3"],
)

# ------------------------------------------------------------------
# Optimised model
# ------------------------------------------------------------------
class ModelNew(nn.Module):
    """
    Optimised version of the original model.
    The channel-wise min and two successive tanh operations are fused
    into a single custom CUDA kernel for improved performance.
    """
    def __init__(self, in_channels, out_channels, kernel_size):
        super().__init__()
        self.conv = nn.Conv2d(in_channels, out_channels, kernel_size)
        self._fused = min_double_tanh

    def forward(self, x):
        x = self.conv(x)
        x = self._fused.min_double_tanh_cuda(x)
        return x

────────────────────────────────────────
Main Critical Problem
────────────────────────────────────────
critical_issue: Duplicate PYBIND11_MODULE causes multiple PyInit symbols
why_it_matters: Linker error stops the extension from building, so fused CUDA op is unavailable; model falls back or fails, diverging from reference.
minimal_fix_hint: Delete one PYBIND11_MODULE definition

```python
# <your corrected code>
```
# ==========================================================
