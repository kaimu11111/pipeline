```python
import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.utils.cpp_extension import load_inline

# ---------------------------------------------------------------------------
# CUDA kernel (fused ReLU + 2×2 max-pool with stride 2)
# ---------------------------------------------------------------------------
cuda_source = r"""
#include <torch/extension.h>
#include <cuda_runtime.h>

template <typename scalar_t>
__global__ void relu_maxpool2x2_kernel(const scalar_t* __restrict__ in,
                                       scalar_t* __restrict__ out,
                                       const int N, const int C,
                                       const int H, const int W)
{
    const int H_out = H >> 1;      // H / 2
    const int W_out = W >> 1;      // W / 2
    const int total = N * C * H_out * W_out;

    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx >= total) return;

    // Decompose linear index → N, C, h_out, w_out
    int w_out = idx % W_out;
    idx      = idx / W_out;
    int h_out = idx % H_out;
    idx      = idx / H_out;
    int c = idx % C;
    int n = idx / C;

    const int h_in = h_out << 1;      // *2
    const int w_in = w_out << 1;

    // Base pointer for (n, c, h_in, w_in)
    const int in_offset = (((n * C + c) * H + h_in) * W) + w_in;

    scalar_t v0 = in[in_offset];
    scalar_t v1 = in[in_offset + 1];
    scalar_t v2 = in[in_offset + W];
    scalar_t v3 = in[in_offset + W + 1];

    // Max-pool over 2×2 window
    scalar_t m1 = v0 > v1 ? v0 : v1;
    scalar_t m2 = v2 > v3 ? v2 : v3;
    scalar_t mx = m1 > m2 ? m1 : m2;

    // ReLU
    mx = mx > scalar_t(0) ? mx : scalar_t(0);

    // Write output
    out[(((n * C + c) * H_out + h_out) * W_out) + w_out] = mx;
}

torch::Tensor relu_maxpool2x2_cuda(torch::Tensor input) {
    TORCH_CHECK(input.is_cuda(), "input must be a CUDA tensor");
    TORCH_CHECK(input.dim() == 4, "input must be NCHW");
    TORCH_CHECK(input.scalar_type() == torch::kFloat32, "only float32 supported");

    const int64_t N = input.size(0);
    const int64_t C = input.size(1);
    const int64_t H = input.size(2);
    const int64_t W = input.size(3);

    TORCH_CHECK((H % 2 == 0) && (W % 2 == 0), "H and W must be even");

    auto output = torch::empty({N, C, H / 2, W / 2}, input.options());

    const int threads = 256;
    const int64_t total = N * C * (H / 2) * (W / 2);
    const int blocks = (total + threads - 1) / threads;

    cudaStream_t stream = at::cuda::getCurrentCUDAStream();
    relu_maxpool2x2_kernel<float><<<blocks, threads, 0, stream>>>(
        input.data_ptr<float>(),
        output.data_ptr<float>(),
        static_cast<int>(N),
        static_cast<int>(C),
        static_cast<int>(H),
        static_cast<int>(W));

    return output;
}
"""

cpp_decl = "torch::Tensor relu_maxpool2x2_cuda(torch::Tensor input);"

fused_relu_pool = load_inline(
    name="fused_relu_maxpool2x2",
    cpp_sources=cpp_decl,
    cuda_sources=cuda_source,
    functions=["relu_maxpool2x2_cuda"],
    verbose=False,
)

# ---------------------------------------------------------------------------
# Optimised model using the fused kernel
# ---------------------------------------------------------------------------
class ModelNew(nn.Module):
    def __init__(self, num_classes):
        super().__init__()
        # Convolutional layers
        self.conv1 = nn.Conv2d(in_channels=1, out_channels=6, kernel_size=5, stride=1)
        self.conv2 = nn.Conv2d(in_channels=6, out_channels=16, kernel_size=5, stride=1)

        # Fully connected layers
        self.fc1 = nn.Linear(in_features=16 * 5 * 5, out_features=120)
        self.fc2 = nn.Linear(in_features=120, out_features=84)
        self.fc3 = nn.Linear(in_features=84, out_features=num_classes)

        # Reference to the fused CUDA op
        self.fused_relu_pool = fused_relu_pool

    def forward(self, x):
        # First conv → fused ReLU+pool
        x = self.conv1(x)
        x = self.fused_relu_pool.relu_maxpool2x2_cuda(x)

        # Second conv → fused ReLU+pool
        x = self.conv2(x)
        x = self.fused_relu_pool.relu_maxpool2x2_cuda(x)

        # Flatten and FC layers (ReLU via PyTorch)
        x = x.view(x.size(0), -1)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x
```