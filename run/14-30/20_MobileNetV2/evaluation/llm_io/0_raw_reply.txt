```python
import torch
import torch.nn as nn
from torch.utils.cpp_extension import load_inline

###############################################################################
#                           Fast ReLU6 CUDA extension                         #
###############################################################################
cpp_src = r"""
#include <torch/extension.h>

// Forward / backward interface declarations
torch::Tensor relu6_forward_cuda(torch::Tensor x);
torch::Tensor relu6_backward_cuda(torch::Tensor grad_out, torch::Tensor x);

PYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {
    m.def("relu6_forward_cuda",  &relu6_forward_cuda,  "ReLU6 forward (CUDA)");
    m.def("relu6_backward_cuda", &relu6_backward_cuda, "ReLU6 backward (CUDA)");
}
"""

cuda_src = r"""
#include <torch/extension.h>
#include <cuda_runtime.h>

template <typename scalar_t>
__global__ void relu6_forward_kernel(const scalar_t* __restrict__ x,
                                     scalar_t* __restrict__ y,
                                     int64_t numel) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    for (int64_t i = idx; i < numel; i += blockDim.x * gridDim.x) {
        scalar_t v = x[i];
        v = v > scalar_t(0) ? v : scalar_t(0);
        v = v < scalar_t(6) ? v : scalar_t(6);
        y[i] = v;
    }
}

template <typename scalar_t>
__global__ void relu6_backward_kernel(const scalar_t* __restrict__ grad_out,
                                      const scalar_t* __restrict__ x,
                                      scalar_t* __restrict__ grad_in,
                                      int64_t numel) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    for (int64_t i = idx; i < numel; i += blockDim.x * gridDim.x) {
        scalar_t v = x[i];
        grad_in[i] = (v > scalar_t(0) && v < scalar_t(6)) ? grad_out[i] : scalar_t(0);
    }
}

torch::Tensor relu6_forward_cuda(torch::Tensor x) {
    auto y = torch::empty_like(x);
    const int64_t numel = x.numel();
    const int threads = 256;
    const int blocks  = (numel + threads - 1) / threads;

    AT_DISPATCH_FLOATING_TYPES_AND_HALF(
        x.scalar_type(), "relu6_forward_cuda", ([&] {
            relu6_forward_kernel<scalar_t><<<blocks, threads>>>(
                x.data_ptr<scalar_t>(),
                y.data_ptr<scalar_t>(),
                numel);
        }));
    return y;
}

torch::Tensor relu6_backward_cuda(torch::Tensor grad_out, torch::Tensor x) {
    auto grad_in = torch::empty_like(x);
    const int64_t numel = x.numel();
    const int threads = 256;
    const int blocks  = (numel + threads - 1) / threads;

    AT_DISPATCH_FLOATING_TYPES_AND_HALF(
        x.scalar_type(), "relu6_backward_cuda", ([&] {
            relu6_backward_kernel<scalar_t><<<blocks, threads>>>(
                grad_out.data_ptr<scalar_t>(),
                x.data_ptr<scalar_t>(),
                grad_in.data_ptr<scalar_t>(),
                numel);
        }));
    return grad_in;
}
"""

# Build the extension
relu6_ext = load_inline(
    name="fast_relu6_ext",
    cpp_sources=cpp_src,
    cuda_sources=cuda_src,
    functions=["relu6_forward_cuda", "relu6_backward_cuda"],
    verbose=False
)

###############################################################################
#                          Autograd-aware Python wrapper                      #
###############################################################################
class _FastReLU6Func(torch.autograd.Function):
    @staticmethod
    def forward(ctx, x):
        x_contig = x.contiguous()
        y = relu6_ext.relu6_forward_cuda(x_contig)
        ctx.save_for_backward(x_contig)
        return y

    @staticmethod
    def backward(ctx, grad_out):
        (x,) = ctx.saved_tensors
        grad_in = relu6_ext.relu6_backward_cuda(grad_out.contiguous(), x)
        return grad_in

class FastReLU6(nn.Module):
    def forward(self, x):
        return _FastReLU6Func.apply(x)

###############################################################################
#                                ModelNew                                     #
###############################################################################
class ModelNew(nn.Module):
    def __init__(self, num_classes=1000):
        super(ModelNew, self).__init__()

        # Utility fn.
        def _make_divisible(v, divisor, min_value=None):
            if min_value is None:
                min_value = divisor
            new_v = max(min_value, int(v + divisor / 2) // divisor * divisor)
            if new_v < 0.9 * v:
                new_v += divisor
            return new_v

        # Inverted residual block
        def _inverted_residual_block(inp, oup, stride, expand_ratio):
            hidden_dim = int(inp * expand_ratio)
            use_res_connect = stride == 1 and inp == oup
            layers = []

            # Pointwise
            if expand_ratio != 1:
                layers.append(nn.Conv2d(inp, hidden_dim, 1, 1, 0, bias=False))
                layers.append(nn.BatchNorm2d(hidden_dim))
                layers.append(FastReLU6())

            # Depthwise
            layers.extend([
                nn.Conv2d(hidden_dim, hidden_dim, 3, stride, 1,
                          groups=hidden_dim, bias=False),
                nn.BatchNorm2d(hidden_dim),
                FastReLU6(),
                # Pointwise-linear
                nn.Conv2d(hidden_dim, oup, 1, 1, 0, bias=False),
                nn.BatchNorm2d(oup),
            ])

            return (nn.Sequential(*layers), use_res_connect)

        input_channel = 32
        last_channel  = 1280

        inverted_residual_setting = [
            # t, c, n, s
            [1,  16, 1, 1],
            [6,  24, 2, 2],
            [6,  32, 3, 2],
            [6,  64, 4, 2],
            [6,  96, 3, 1],
            [6, 160, 3, 2],
            [6, 320, 1, 1],
        ]

        # First layer
        features = [
            nn.Conv2d(3, input_channel, 3, 2, 1, bias=False),
            nn.BatchNorm2d(input_channel),
            FastReLU6()
        ]

        # Inverted residual blocks
        for t, c, n, s in inverted_residual_setting:
            output_channel = _make_divisible(c, 8)
            for i in range(n):
                stride = s if i == 0 else 1
                block, _ = _inverted_residual_block(
                    input_channel, output_channel, stride, expand_ratio=t)
                features.append(block)
                input_channel = output_channel

        # Last layers
        features.extend([
            nn.Conv2d(input_channel, last_channel, 1, 1, 0, bias=False),
            nn.BatchNorm2d(last_channel),
            FastReLU6(),
            nn.AdaptiveAvgPool2d((1, 1)),
        ])

        self.features = nn.Sequential(*features)
        self.classifier = nn.Sequential(
            nn.Dropout(0.0),
            nn.Linear(last_channel, num_classes),
        )

        # Init
        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                nn.init.kaiming_normal_(m.weight, mode='fan_out')
                if m.bias is not None:
                    nn.init.zeros_(m.bias)
            elif isinstance(m, nn.BatchNorm2d):
                nn.init.ones_(m.weight)
                nn.init.zeros_(m.bias)
            elif isinstance(m, nn.Linear):
                nn.init.normal_(m.weight, 0, 0.01)
                nn.init.zeros_(m.bias)

    def forward(self, x):
        x = self.features(x)
        x = x.view(x.size(0), -1)
        x = self.classifier(x)
        return x

###############################################################################
#                              Helper functions                               #
###############################################################################
batch_size = 5
num_classes = 100

def get_inputs():
    return [torch.rand(batch_size, 3, 112, 112).cuda()]

def get_init_inputs():
    return [num_classes]
```