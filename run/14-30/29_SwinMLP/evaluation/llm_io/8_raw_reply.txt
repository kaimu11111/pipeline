```python
# 1 ─────────────────────────────────────────────── Imports
import torch
import torch.nn as nn
from torch.utils.cpp_extension import load_inline

# 2 ──────────────────────────────────────────── CUDA source
source = r"""
#include <torch/extension.h>
#include <cuda.h>
#include <cuda_runtime.h>

#define CHECK_CUDA(x)        TORCH_CHECK(x.is_cuda(),        #x " must be a CUDA tensor")
#define CHECK_CONTIGUOUS(x)  TORCH_CHECK(x.is_contiguous(),  #x " must be contiguous")
#define CHECK_INPUT(x)       CHECK_CUDA(x); CHECK_CONTIGUOUS(x)

using index_t = long long;

// ---------------------------------------------------------------------
//                             CUDA KERNELS
// ---------------------------------------------------------------------
__global__ void window_partition_kernel(
    const float* __restrict__ input,
    float*       __restrict__ output,
    const int B, const int H, const int W, const int C,
    const int window_size,
    const int num_windows_per_img)
{
    index_t total = static_cast<index_t>(B) * num_windows_per_img *
                    window_size * window_size * C;
    index_t idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx >= total) return;

    int c            = idx % C;                 idx /= C;
    int win_x_in     = idx % window_size;       idx /= window_size;
    int win_y_in     = idx % window_size;       idx /= window_size;
    int win_idx_glb  = idx;

    int b            = win_idx_glb / num_windows_per_img;
    int win_local    = win_idx_glb % num_windows_per_img;

    int num_windows_w= W / window_size;
    int win_y        = win_local / num_windows_w;
    int win_x        = win_local % num_windows_w;

    int in_y         = win_y * window_size + win_y_in;
    int in_x         = win_x * window_size + win_x_in;

    index_t in_off   = (((static_cast<index_t>(b) * H + in_y) * W + in_x) * C) + c;
    index_t out_off  = (((static_cast<index_t>(win_idx_glb) * window_size + win_y_in)
                        * window_size + win_x_in) * C) + c;

    output[out_off] = input[in_off];
}

__global__ void window_reverse_kernel(
    const float* __restrict__ input,
    float*       __restrict__ output,
    const int B, const int H, const int W, const int C,
    const int window_size,
    const int num_windows_per_img)
{
    index_t total = static_cast<index_t>(B) * H * W * C;
    index_t idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx >= total) return;

    int c = idx % C; idx /= C;
    int x = idx % W; idx /= W;
    int y = idx % H; idx /= H;
    int b = idx;

    int num_windows_w = W / window_size;
    int win_y         = y / window_size;
    int win_x         = x / window_size;
    int win_idx_glb   = b * num_windows_per_img + win_y * num_windows_w + win_x;

    int y_in          = y % window_size;
    int x_in          = x % window_size;

    index_t in_off  = (((static_cast<index_t>(win_idx_glb) * window_size + y_in)
                       * window_size + x_in) * C) + c;
    index_t out_off = (((static_cast<index_t>(b) * H + y) * W + x) * C) + c;

    output[out_off] = input[in_off];
}

// ---------------------------------------------------------------------
//                           HOST  FUNCTIONS
// ---------------------------------------------------------------------
torch::Tensor window_partition_cuda(torch::Tensor x, int window_size)
{
    CHECK_INPUT(x);
    TORCH_CHECK(x.dim() == 4, "Input must be 4D (B, H, W, C)");

    const int B = x.size(0);
    const int H = x.size(1);
    const int W = x.size(2);
    const int C = x.size(3);

    TORCH_CHECK(H % window_size == 0 && W % window_size == 0,
                "H and W must be divisible by window_size");

    const int num_windows_h      = H / window_size;
    const int num_windows_w      = W / window_size;
    const int num_windows_per_img= num_windows_h * num_windows_w;

    auto out = torch::empty({B * num_windows_per_img,
                             window_size, window_size, C},
                             x.options());

    index_t total  = static_cast<index_t>(B) * num_windows_per_img *
                     window_size * window_size * C;
    const int thr = 256;
    const int blk = (total + thr - 1) / thr;

    window_partition_kernel<<<blk, thr>>>(
        x.data_ptr<float>(),
        out.data_ptr<float>(),
        B, H, W, C, window_size, num_windows_per_img);

    return out;
}

torch::Tensor window_reverse_cuda(torch::Tensor windows, int window_size,
                                  int H, int W)
{
    CHECK_INPUT(windows);
    TORCH_CHECK(windows.dim() == 4,
                "windows must be 4D (B*nW, window, window, C)");

    const int C                  = windows.size(3);
    const int num_windows_per_img= (H / window_size) * (W / window_size);
    const int total_windows      = windows.size(0);
    const int B                  = total_windows / num_windows_per_img;

    auto out = torch::empty({B, H, W, C}, windows.options());

    index_t total  = static_cast<index_t>(B) * H * W * C;
    const int thr  = 256;
    const int blk  = (total + thr - 1) / thr;

    window_reverse_kernel<<<blk, thr>>>(
        windows.data_ptr<float>(),
        out.data_ptr<float>(),
        B, H, W, C, window_size, num_windows_per_img);

    return out;
}
"""

# 3 ────────────────────────────────────────── C++ prototypes
cpp_src = r"""
torch::Tensor window_partition_cuda(torch::Tensor x, int window_size);
torch::Tensor window_reverse_cuda(torch::Tensor windows, int window_size,
                                  int H, int W);
"""

# 4 ──────────────────────────────────────────── load_inline
window_ops = load_inline(
    name="window_ops",
    cpp_sources=cpp_src,
    cuda_sources=source,
    functions=["window_partition_cuda", "window_reverse_cuda"],
    verbose=False,
)

# --------------------------- Autograd helpers ---------------------------
def window_partition_fast(x: torch.Tensor, window_size: int):
    return window_ops.window_partition_cuda(x.contiguous(), window_size)

def window_reverse_fast(windows: torch.Tensor, window_size: int, H: int, W: int):
    return window_ops.window_reverse_cuda(windows.contiguous(), window_size, H, W)

class _WindowPartitionFn(torch.autograd.Function):
    @staticmethod
    def forward(ctx, x, window_size: int):
        ctx.window_size = window_size
        ctx.H, ctx.W = x.size(1), x.size(2)
        return window_partition_fast(x, window_size)

    @staticmethod
    def backward(ctx, grad_output):
        grad_x = window_reverse_fast(
            grad_output, ctx.window_size, ctx.H, ctx.W
        )
        return grad_x, None

class _WindowReverseFn(torch.autograd.Function):
    @staticmethod
    def forward(ctx, windows, window_size: int, H: int, W: int):
        ctx.window_size = window_size
        ctx.H, ctx.W = H, W
        return window_reverse_fast(windows, window_size, H, W)

    @staticmethod
    def backward(ctx, grad_output):
        grad_windows = window_partition_fast(
            grad_output, ctx.window_size
        )
        return grad_windows, None, None, None

def window_partition(x: torch.Tensor, window_size: int):
    return _WindowPartitionFn.apply(x, window_size)

def window_reverse(windows: torch.Tensor, window_size: int, H: int, W: int):
    return _WindowReverseFn.apply(windows, window_size, H, W)

# 5 ──────────────────────────────────────────────── Model
class ModelNew(nn.Module):
    """Swin-MLP backbone accelerated with custom CUDA window ops; stochastic-depth disabled."""

    # ----------------------------- helpers -----------------------------
    class DropPath(nn.Identity):  # stochastic-depth removed
        def __init__(self, drop_prob: float = 0.):
            super().__init__()

    class Mlp(nn.Module):
        def __init__(self, in_features, hidden_features=None, out_features=None,
                     act_layer=nn.GELU, drop=0.):
            super().__init__()
            out_features    = out_features or in_features
            hidden_features = hidden_features or in_features
            self.fc1  = nn.Linear(in_features, hidden_features)
            self.act  = act_layer()
            self.fc2  = nn.Linear(hidden_features, out_features)
            self.drop = nn.Dropout(drop)

        def forward(self, x):
            x = self.drop(self.act(self.fc1(x)))
            x = self.drop(self.fc2(x))
            return x

    # ----------------------------- init -----------------------------
    def __init__(self, img_size=224, patch_size=4, in_chans=3,
                 num_classes=1000, embed_dim=96, depths=(2, 2, 6, 2),
                 num_heads=(3, 6, 12, 24), window_size=7, mlp_ratio=4.,
                 drop_rate=0., drop_path_rate=0.,
                 norm_layer=nn.LayerNorm, patch_norm=True):
        super().__init__()

        from itertools import repeat
        import collections.abc
        def _ntuple(n):
            def parse(x):
                if isinstance(x, collections.abc.Iterable) and not isinstance(x, str):
                    return tuple(x)
                return tuple(repeat(x, n))
            return parse
        to_2tuple = _ntuple(2)

        class PatchEmbed(nn.Module):
            """2-D Image to Patch Embedding that tolerates arbitrary (divisible) input size."""
            def __init__(self, img_size, patch_size, in_chans, embed_dim, norm_layer):
                super().__init__()
                patch_size = to_2tuple(patch_size)
                self.patch_size = patch_size
                self.proj = nn.Conv2d(in_chans, embed_dim,
                                      kernel_size=patch_size, stride=patch_size)
                self.norm = norm_layer(embed_dim) if norm_layer else None

            def forward(self, x):
                B, C, H, W = x.shape
                assert H % self.patch_size[0] == 0 and W % self.patch_size[1] == 0, \
                    "H and W must be divisible by patch size."
                x = self.proj(x).flatten(2).transpose(1, 2)  # B, N, C
                if self.norm is not None:
                    x = self.norm(x)
                return x

        class SwinMLPBlock(nn.Module):
            def __init__(self, dim, num_heads,
                         window_size=7, shift_size=0,
                         mlp_ratio=4., drop=0.,
                         act_layer=nn.GELU, norm_layer=nn.LayerNorm):
                super().__init__()
                self.dim         = dim
                self.num_heads   = num_heads
                self.window_size = window_size
                self.shift_size  = shift_size

                self.norm1 = norm_layer(dim)
                self.spatial_mlp = nn.Conv1d(self.num_heads * self.window_size ** 2,
                                             self.num_heads * self.window_size ** 2,
                                             kernel_size=1, groups=self.num_heads)
                self.drop_path = ModelNew.DropPath()  # identity
                mlp_hidden_dim = int(dim * mlp_ratio)
                self.norm2 = norm_layer(dim)
                self.mlp = ModelNew.Mlp(dim, mlp_hidden_dim, act_layer=act_layer, drop=drop)

            def forward(self, x):
                import math
                import torch.nn.functional as F

                B, L, C = x.shape
                H = W = int(math.sqrt(L))
                assert H * W == L, "Input feature has wrong size"

                # dynamically adjust for odd resolutions
                window_size = self.window_size
                shift_size  = self.shift_size
                if min(H, W) <= self.window_size:
                    shift_size  = 0
                    window_size = min(H, W)

                # Padding for cyclic shift
                pad_l = (window_size - shift_size) % window_size
                pad_r = shift_size
                pad_t = pad_l
                pad_b = pad_r
                shortcut = x
                x = self.norm1(x).view(B, H, W, C)

                if shift_size > 0:
                    x = F.pad(x, [0, 0, pad_l, pad_r, pad_t, pad_b])
                H_pad, W_pad = x.shape[1], x.shape[2]

                # Partition windows (CUDA)
                x_windows = window_partition(x, window_size)      # (nW*B, ws, ws, C)
                x_windows = x_windows.view(-1, window_size * window_size, C)

                # Spatial MLP ---------------------------------------------------
                x_wh = x_windows.view(-1, window_size * window_size,
                                      self.num_heads, C // self.num_heads)
                x_wh = x_wh.transpose(1, 2)
                x_wh = x_wh.reshape(-1,
                                    self.num_heads * window_size * window_size,
                                    C // self.num_heads)
                x_wh = self.spatial_mlp(x_wh)
                x_wh = x_wh.view(-1, self.num_heads,
                                 window_size * window_size,
                                 C // self.num_heads).transpose(1, 2)
                spatial_mlp_windows = x_wh.reshape(-1,
                                                   window_size * window_size, C)

                # Merge windows -------------------------------------------------
                spatial_mlp_windows = spatial_mlp_windows.view(-1,
                                                               window_size,
                                                               window_size, C)
                x = window_reverse(spatial_mlp_windows, window_size,
                                   H_pad, W_pad)

                # Remove padding & reshape -------------------------------------
                if shift_size > 0:
                    x = x[:, pad_t:-pad_b, pad_l:-pad_r, :].contiguous()
                x = x.view(B, H * W, C)

                # FFN -----------------------------------------------------------
                x = shortcut + self.drop_path(x)
                x = x + self.drop_path(self.mlp(self.norm2(x)))
                return x

        class PatchMerging(nn.Module):
            def __init__(self, dim, norm_layer=nn.LayerNorm):
                super().__init__()
                self.reduction = nn.Linear(4 * dim, 2 * dim, bias=False)
                self.norm = norm_layer(4 * dim)

            def forward(self, x):
                import math
                B, L, C = x.shape
                H = W = int(math.sqrt(L))
                assert H * W == L and H % 2 == 0 and W % 2 == 0
                x = x.view(B, H, W, C)
                x0 = x[:, 0::2, 0::2, :]
                x1 = x[:, 1::2, 0::2, :]
                x2 = x[:, 0::2, 1::2, :]
                x3 = x[:, 1::2, 1::2, :]
                x = torch.cat([x0, x1, x2, x3], -1)  # B, H/2, W/2, 4C
                x = x.view(B, -1, 4 * C)             # B, H*W/4, 4C
                x = self.reduction(self.norm(x))
                return x

        class BasicLayer(nn.Module):
            def __init__(self, dim, depth, num_heads, window_size,
                         mlp_ratio=4., drop=0.,
                         norm_layer=nn.LayerNorm, downsample=None):
                super().__init__()
                self.blocks = nn.ModuleList([
                    SwinMLPBlock(dim,
                                 num_heads=num_heads,
                                 window_size=window_size,
                                 shift_size=0 if (i % 2 == 0) else window_size // 2,
                                 mlp_ratio=mlp_ratio,
                                 drop=drop,
                                 norm_layer=norm_layer)
                    for i in range(depth)
                ])
                self.downsample = downsample(dim, norm_layer) if downsample else None

            def forward(self, x):
                for blk in self.blocks:
                    x = blk(x)
                if self.downsample is not None:
                    x = self.downsample(x)
                return x

        # ---------------------- patch embedding -------------------------
        self.patch_embed = PatchEmbed(img_size, patch_size, in_chans,
                                      embed_dim,
                                      norm_layer if patch_norm else None)
        self.pos_drop = nn.Dropout(p=drop_rate)

        # ------------------------- layers ------------------------------
        self.layers = nn.ModuleList()
        for i_layer in range(len(depths)):
            layer = BasicLayer(
                dim=int(embed_dim * 2 ** i_layer),
                depth=depths[i_layer],
                num_heads=num_heads[i_layer],
                window_size=window_size,
                mlp_ratio=mlp_ratio,
                drop=drop_rate,
                norm_layer=norm_layer,
                downsample=PatchMerging if (i_layer < len(depths) - 1) else None)
            self.layers.append(layer)

        self.num_features = int(embed_dim * 2 ** (len(depths) - 1))
        self.norm = norm_layer(self.num_features)
        self.avgpool = nn.AdaptiveAvgPool1d(1)
        self.head = nn.Linear(self.num_features, num_classes) \
                    if num_classes > 0 else nn.Identity()

    # ---------------------------------------------------------------------
    def forward_features(self, x):
        x = self.patch_embed(x)        # B, N, C
        x = self.pos_drop(x)
        for layer in self.layers:
            x = layer(x)
        x = self.norm(x)               # B, L, C
        x = self.avgpool(x.transpose(1, 2))  # B, C, 1
        return x.squeeze(-1)

    def forward(self, x):
        x = self.forward_features(x)
        return self.head(x)
```