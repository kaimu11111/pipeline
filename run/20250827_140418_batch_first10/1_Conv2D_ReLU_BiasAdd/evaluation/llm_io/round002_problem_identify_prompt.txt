You are given:

ERROR_LOG:
/home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/utils/cpp_extension.py:2356: UserWarning: TORCH_CUDA_ARCH_LIST is not set, all archs for visible cards are included for compilation. 
If this is not desired, please set os.environ['TORCH_CUDA_ARCH_LIST'].
  warnings.warn(
Error building extension 'relu_bias_add': [1/3] c++ -MMD -MF main.o.d -DTORCH_EXTENSION_NAME=relu_bias_add -DTORCH_API_INCLUDE_EXTENSION_H -DPYBIND11_COMPILER_TYPE=\"_gcc\" -DPYBIND11_STDLIB=\"_libstdcpp\" -DPYBIND11_BUILD_ABI=\"_cxxabi1016\" -isystem /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include -isystem /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/csrc/api/include -isystem /home/wan00559/miniconda3/envs/maxk/include/python3.11 -D_GLIBCXX_USE_CXX11_ABI=1 -fPIC -std=c++17 -c /home/wan00559/.cache/torch_extensions/py311_cu126/relu_bias_add/main.cpp -o main.o 
FAILED: main.o 
c++ -MMD -MF main.o.d -DTORCH_EXTENSION_NAME=relu_bias_add -DTORCH_API_INCLUDE_EXTENSION_H -DPYBIND11_COMPILER_TYPE=\"_gcc\" -DPYBIND11_STDLIB=\"_libstdcpp\" -DPYBIND11_BUILD_ABI=\"_cxxabi1016\" -isystem /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include -isystem /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/csrc/api/include -isystem /home/wan00559/miniconda3/envs/maxk/include/python3.11 -D_GLIBCXX_USE_CXX11_ABI=1 -fPIC -std=c++17 -c /home/wan00559/.cache/torch_extensions/py311_cu126/relu_bias_add/main.cpp -o main.o 
/home/wan00559/.cache/torch_extensions/py311_cu126/relu_bias_add/main.cpp: In function ‘void pybind11_init_relu_bias_add(pybind11::module_&)’:
/home/wan00559/.cache/torch_extensions/py311_cu126/relu_bias_add/main.cpp:11:46: error: ‘forward’ was not declared in this scope
   11 | m.def("forward", torch::wrap_pybind_function(forward), "forward");
      |                                              ^~~~~~~
/home/wan00559/.cache/torch_extensions/py311_cu126/relu_bias_add/main.cpp:11:46: note: suggested alternatives:
In file included from /usr/include/c++/13/bits/stl_function.h:60,
                 from /usr/include/c++/13/functional:49,
                 from /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/c10/core/DeviceType.h:12,
                 from /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/c10/core/Device.h:3,
                 from /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/ATen/core/TensorBody.h:11,
                 from /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/ATen/core/Tensor.h:3,
                 from /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/ATen/Tensor.h:3,
                 from /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/csrc/autograd/function_hook.h:3,
                 from /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/csrc/autograd/cpp_hook.h:2,
                 from /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/csrc/autograd/variable.h:6,
                 from /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/csrc/autograd/autograd.h:3,
                 from /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/csrc/api/include/torch/autograd.h:3,
                 from /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/csrc/api/include/torch/all.h:7,
                 from /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/extension.h:5,
                 from /home/wan00559/.cache/torch_extensions/py311_cu126/relu_bias_add/main.cpp:1:
/usr/include/c++/13/bits/move.h:82:5: note:   ‘std::forward’
   82 |     forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
      |     ^~~~~~~
In file included from /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/csrc/jit/ir/ir.h:18,
                 from /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/csrc/jit/api/function_impl.h:4,
                 from /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/csrc/jit/api/method.h:7,
                 from /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/csrc/jit/api/object.h:5,
                 from /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/csrc/jit/api/module.h:4,
                 from /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/csrc/api/include/torch/serialize/input-archive.h:5,
                 from /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/csrc/api/include/torch/serialize/archive.h:3,
                 from /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/csrc/api/include/torch/data/samplers/serialize.h:4,
                 from /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/csrc/api/include/torch/data/samplers.h:8,
                 from /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/csrc/api/include/torch/data/datasets/chunk.h:6,
                 from /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/csrc/api/include/torch/data/datasets.h:4,
                 from /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/csrc/api/include/torch/data.h:4,
                 from /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/csrc/api/include/torch/all.h:9:
/home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/ATen/core/interned_strings.h:352:1: note:   ‘c10::attr::forward’
  352 | FORALL_NS_SYMBOLS(DEFINE_SYMBOL)
      | ^~~~~~~~~~~~~~~~~
/home/wan00559/.cache/torch_extensions/py311_cu126/relu_bias_add/main.cpp:12:47: error: ‘backward’ was not declared in this scope
   12 | m.def("backward", torch::wrap_pybind_function(backward), "backward");
      |                                               ^~~~~~~~
/home/wan00559/.cache/torch_extensions/py311_cu126/relu_bias_add/main.cpp:12:47: note: suggested alternatives:
/home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/ATen/core/interned_strings.h:352:1: note:   ‘c10::aten::backward’
  352 | FORALL_NS_SYMBOLS(DEFINE_SYMBOL)
      | ^~~~~~~~~~~~~~~~~
/home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/csrc/autograd/autograd.h:47:16: note:   ‘torch::autograd::backward’
   47 | TORCH_API void backward(
      |                ^~~~~~~~
[2/3] /usr/bin/nvcc --generate-dependencies-with-compile --dependency-output cuda.cuda.o.d -DTORCH_EXTENSION_NAME=relu_bias_add -DTORCH_API_INCLUDE_EXTENSION_H -DPYBIND11_COMPILER_TYPE=\"_gcc\" -DPYBIND11_STDLIB=\"_libstdcpp\" -DPYBIND11_BUILD_ABI=\"_cxxabi1016\" -isystem /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include -isystem /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/csrc/api/include -isystem /home/wan00559/miniconda3/envs/maxk/include/python3.11 -D_GLIBCXX_USE_CXX11_ABI=1 -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr -gencode=arch=compute_75,code=compute_75 -gencode=arch=compute_75,code=sm_75 --compiler-options '-fPIC' -std=c++17 -c /home/wan00559/.cache/torch_extensions/py311_cu126/relu_bias_add/cuda.cu -o cuda.cuda.o 
ninja: build stopped: subcommand failed.

PyTorch reference (ground truth):

import torch
import torch.nn as nn

class Model(nn.Module):
    """
    Simple model that performs a convolution, applies ReLU, and adds a bias term.
    """
    def __init__(self, in_channels, out_channels, kernel_size, bias_shape):
        super(Model, self).__init__()
        self.conv = nn.Conv2d(in_channels, out_channels, kernel_size)
        self.bias = nn.Parameter(torch.randn(bias_shape)) 

    def forward(self, x):
        x = self.conv(x)
        x = torch.relu(x)
        x = x + self.bias
        return x

batch_size = 32
in_channels  = 32 
out_channels = 64  
height = width = 64
kernel_size = 3
bias_shape = (out_channels, 1, 1)

def get_inputs():
    return [torch.rand(batch_size, in_channels, height, width)]

def get_init_inputs():
    return [in_channels, out_channels, kernel_size, bias_shape]

CUDA candidate (to audit):

import torch
import torch.nn as nn
from torch.utils.cpp_extension import load_inline

# ---------------------------------------------------------------------
#  CUDA kernels + C++ wrappers
# ---------------------------------------------------------------------
source = r"""
#include <torch/extension.h>
#include <cuda_runtime.h>

//////////////////////////////////////////////////////////////////
//                        Forward kernel                        //
//////////////////////////////////////////////////////////////////
__global__ void relu_bias_add_fwd_kernel(const float* __restrict__ in,
                                         const float* __restrict__ bias,
                                         float* __restrict__ out,
                                         const int channels,
                                         const int hw,
                                         const int total) {
    const int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx >= total) return;
    const int c = (idx / hw) % channels;           // channel index
    float v = in[idx];
    v = v > 0.f ? v : 0.f;                         // ReLU
    out[idx] = v + bias[c];                        // Bias add
}

//////////////////////////////////////////////////////////////////
//                        Backward kernel                       //
//////////////////////////////////////////////////////////////////
__global__ void relu_bias_add_bwd_kernel(const float* __restrict__ grad_out,
                                         const float* __restrict__ input,
                                         float* __restrict__ grad_in,
                                         float* __restrict__ grad_bias,
                                         const int channels,
                                         const int hw,
                                         const int total) {
    const int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx >= total) return;
    const int c  = (idx / hw) % channels;
    const float go = grad_out[idx];
    const float gi = (input[idx] > 0.f ? 1.f : 0.f) * go; // dReLU
    grad_in[idx] = gi;
    atomicAdd(&grad_bias[c], gi);                   // accumulate bias grad
}

//////////////////////////////////////////////////////////////////
//               C++/CUDA wrappers exposed to Python            //
//////////////////////////////////////////////////////////////////
torch::Tensor relu_bias_add_forward_cuda(torch::Tensor input,
                                         torch::Tensor bias) {
    TORCH_CHECK(input.is_cuda(), "input must be CUDA");
    TORCH_CHECK(bias.is_cuda(),  "bias must be CUDA");
    TORCH_CHECK(input.scalar_type() == at::kFloat, "float only");
    TORCH_CHECK(bias.scalar_type()  == at::kFloat, "float only");

    input = input.contiguous();
    bias  = bias.contiguous();

    const int C     = input.size(1);
    const int H     = input.size(2);
    const int W     = input.size(3);
    const int hw    = H * W;
    const int total = input.numel();

    auto output = torch::empty_like(input);

    const int threads = 256;
    const int blocks  = (total + threads - 1) / threads;

    relu_bias_add_fwd_kernel<<<blocks, threads>>>(
        input.data_ptr<float>(),
        bias.data_ptr<float>(),
        output.data_ptr<float>(),
        C, hw, total
    );
    return output;
}

std::vector<torch::Tensor> relu_bias_add_backward_cuda(torch::Tensor grad_out,
                                                       torch::Tensor input,
                                                       torch::Tensor bias) {
    TORCH_CHECK(grad_out.is_cuda(), "grad_out must be CUDA");
    TORCH_CHECK(input.is_cuda(),    "input must be CUDA");
    TORCH_CHECK(bias.is_cuda(),     "bias  must be CUDA");

    grad_out = grad_out.contiguous();
    input    = input.contiguous();
    bias     = bias.contiguous();

    const int C     = input.size(1);
    const int H     = input.size(2);
    const int W     = input.size(3);
    const int hw    = H * W;
    const int total = input.numel();

    auto grad_input = torch::empty_like(input);
    auto grad_bias  = torch::zeros_like(bias);

    const int threads = 256;
    const int blocks  = (total + threads - 1) / threads;

    relu_bias_add_bwd_kernel<<<blocks, threads>>>(
        grad_out.data_ptr<float>(),
        input.data_ptr<float>(),
        grad_input.data_ptr<float>(),
        grad_bias.data_ptr<float>(),
        C, hw, total
    );
    return {grad_input, grad_bias};
}

//////////////////////////////////////////////////////////////////
//                         PyBind entry                         //
//////////////////////////////////////////////////////////////////
PYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {
    m.def("forward",  &relu_bias_add_forward_cuda,  "ReLU+BiasAdd forward (CUDA)");
    m.def("backward", &relu_bias_add_backward_cuda, "ReLU+BiasAdd backward (CUDA)");
}
"""

# ---------------------------------------------------------------------
#  C++ prototype declarations (needed by load_inline)
# ---------------------------------------------------------------------
cpp_src = r"""
#include <torch/extension.h>
torch::Tensor relu_bias_add_forward_cuda(torch::Tensor input,
                                         torch::Tensor bias);
std::vector<torch::Tensor> relu_bias_add_backward_cuda(torch::Tensor grad_out,
                                                       torch::Tensor input,
                                                       torch::Tensor bias);
"""

# ---------------------------------------------------------------------
#  Compile + load the extension
# ---------------------------------------------------------------------
relu_bias_add = load_inline(
    name="relu_bias_add",
    cpp_sources=cpp_src,
    cuda_sources=source,
    functions=["forward", "backward"],
    with_cuda=True,
    verbose=False,
)

# ---------------------------------------------------------------------
#  Autograd bridge (Python side)
# ---------------------------------------------------------------------
class _ReluBiasAddFunction(torch.autograd.Function):
    @staticmethod
    def forward(ctx, x, bias):
        ctx.save_for_backward(x, bias)
        return relu_bias_add.forward(x, bias)

    @staticmethod
    def backward(ctx, grad_out):
        x, bias = ctx.saved_tensors
        grad_x, grad_bias = relu_bias_add.backward(grad_out.contiguous(), x, bias)
        return grad_x, grad_bias

# ---------------------------------------------------------------------
#  Optimised Model
# ---------------------------------------------------------------------
class ModelNew(nn.Module):
    """
    Optimised model: Conv2d followed by fused ReLU + BiasAdd.
    """
    def __init__(self, in_channels, out_channels, kernel_size, bias_shape):
        super().__init__()
        self.conv = nn.Conv2d(in_channels, out_channels, kernel_size)
        self.bias = nn.Parameter(torch.randn(bias_shape))  # (C,1,1)

    def forward(self, x):
        x = self.conv(x)
        x = _ReluBiasAddFunction.apply(x, self.bias)
        return x


Follow the Rules and produce the JSON exactly in the specified format.