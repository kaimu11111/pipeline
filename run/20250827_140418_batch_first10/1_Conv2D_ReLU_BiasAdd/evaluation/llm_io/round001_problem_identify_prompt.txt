You are given:

ERROR_LOG:
/home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/utils/cpp_extension.py:2356: UserWarning: TORCH_CUDA_ARCH_LIST is not set, all archs for visible cards are included for compilation. 
If this is not desired, please set os.environ['TORCH_CUDA_ARCH_LIST'].
  warnings.warn(
Error building extension 'relu_bias_add': [1/3] c++ -MMD -MF main.o.d -DTORCH_EXTENSION_NAME=relu_bias_add -DTORCH_API_INCLUDE_EXTENSION_H -DPYBIND11_COMPILER_TYPE=\"_gcc\" -DPYBIND11_STDLIB=\"_libstdcpp\" -DPYBIND11_BUILD_ABI=\"_cxxabi1016\" -isystem /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include -isystem /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/csrc/api/include -isystem /home/wan00559/miniconda3/envs/maxk/include/python3.11 -D_GLIBCXX_USE_CXX11_ABI=1 -fPIC -std=c++17 -c /home/wan00559/.cache/torch_extensions/py311_cu126/relu_bias_add/main.cpp -o main.o 
FAILED: main.o 
c++ -MMD -MF main.o.d -DTORCH_EXTENSION_NAME=relu_bias_add -DTORCH_API_INCLUDE_EXTENSION_H -DPYBIND11_COMPILER_TYPE=\"_gcc\" -DPYBIND11_STDLIB=\"_libstdcpp\" -DPYBIND11_BUILD_ABI=\"_cxxabi1016\" -isystem /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include -isystem /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/csrc/api/include -isystem /home/wan00559/miniconda3/envs/maxk/include/python3.11 -D_GLIBCXX_USE_CXX11_ABI=1 -fPIC -std=c++17 -c /home/wan00559/.cache/torch_extensions/py311_cu126/relu_bias_add/main.cpp -o main.o 
/home/wan00559/.cache/torch_extensions/py311_cu126/relu_bias_add/main.cpp: In function ‘void pybind11_init_relu_bias_add(pybind11::module_&)’:
/home/wan00559/.cache/torch_extensions/py311_cu126/relu_bias_add/main.cpp:4:57: error: ‘relu_bias_add_cuda’ was not declared in this scope
    4 | m.def("relu_bias_add_cuda", torch::wrap_pybind_function(relu_bias_add_cuda), "relu_bias_add_cuda");
      |                                                         ^~~~~~~~~~~~~~~~~~
[2/3] /usr/bin/nvcc --generate-dependencies-with-compile --dependency-output cuda.cuda.o.d -DTORCH_EXTENSION_NAME=relu_bias_add -DTORCH_API_INCLUDE_EXTENSION_H -DPYBIND11_COMPILER_TYPE=\"_gcc\" -DPYBIND11_STDLIB=\"_libstdcpp\" -DPYBIND11_BUILD_ABI=\"_cxxabi1016\" -isystem /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include -isystem /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/csrc/api/include -isystem /home/wan00559/miniconda3/envs/maxk/include/python3.11 -D_GLIBCXX_USE_CXX11_ABI=1 -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr -gencode=arch=compute_75,code=compute_75 -gencode=arch=compute_75,code=sm_75 --compiler-options '-fPIC' -std=c++17 -c /home/wan00559/.cache/torch_extensions/py311_cu126/relu_bias_add/cuda.cu -o cuda.cuda.o 
ninja: build stopped: subcommand failed.

PyTorch reference (ground truth):

import torch
import torch.nn as nn

class Model(nn.Module):
    """
    Simple model that performs a convolution, applies ReLU, and adds a bias term.
    """
    def __init__(self, in_channels, out_channels, kernel_size, bias_shape):
        super(Model, self).__init__()
        self.conv = nn.Conv2d(in_channels, out_channels, kernel_size)
        self.bias = nn.Parameter(torch.randn(bias_shape)) 

    def forward(self, x):
        x = self.conv(x)
        x = torch.relu(x)
        x = x + self.bias
        return x

batch_size = 32
in_channels  = 32 
out_channels = 64  
height = width = 64
kernel_size = 3
bias_shape = (out_channels, 1, 1)

def get_inputs():
    return [torch.rand(batch_size, in_channels, height, width)]

def get_init_inputs():
    return [in_channels, out_channels, kernel_size, bias_shape]

CUDA candidate (to audit):

import torch
import torch.nn as nn
from torch.utils.cpp_extension import load_inline

# -------------------------------------------------------------------------
# Fused ReLU + BiasAdd CUDA kernel
# -------------------------------------------------------------------------
cuda_src = r"""
#include <torch/extension.h>
#include <cuda_runtime.h>

__global__ void relu_bias_add_kernel(const float* __restrict__ in,
                                     const float* __restrict__ bias,
                                     float* __restrict__ out,
                                     const int channels,
                                     const int hw,
                                     const int total) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx >= total) return;
    int c = (idx / hw) % channels;        // derive channel index
    float v = in[idx];
    v = v > 0.f ? v : 0.f;                // ReLU
    out[idx] = v + bias[c];               // add bias
}

torch::Tensor relu_bias_add_cuda(torch::Tensor input,
                                 torch::Tensor bias) {
    TORCH_CHECK(input.is_cuda(), "input must be a CUDA tensor");
    TORCH_CHECK(bias.is_cuda(),  "bias  must be a CUDA tensor");
    TORCH_CHECK(input.scalar_type() == at::kFloat, "only float tensors are supported");
    TORCH_CHECK(bias.scalar_type()  == at::kFloat, "only float tensors are supported");

    input = input.contiguous();
    bias  = bias.contiguous();

    const int C      = input.size(1);
    const int H      = input.size(2);
    const int W      = input.size(3);
    const int hw     = H * W;
    const int total  = input.numel();

    auto output = torch::empty_like(input);

    const int threads = 256;
    const int blocks  = (total + threads - 1) / threads;

    relu_bias_add_kernel<<<blocks, threads>>>(
        input.data_ptr<float>(),
        bias.data_ptr<float>(),
        output.data_ptr<float>(),
        C,
        hw,
        total
    );

    return output;
}

PYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {
    m.def("relu_bias_add_cuda", &relu_bias_add_cuda,
          "Fused ReLU + BiasAdd (CUDA)");
}
"""

# Load / compile the CUDA extension
relu_bias_add = load_inline(
    name="relu_bias_add",
    cpp_sources="",
    cuda_sources=cuda_src,
    functions=["relu_bias_add_cuda"],
    with_cuda=True,
    verbose=False,
)

# -------------------------------------------------------------------------
# Optimised Model definition
# -------------------------------------------------------------------------
class ModelNew(nn.Module):
    """
    Optimised model that performs Conv2d followed by a fused ReLU + BiasAdd.
    """
    def __init__(self, in_channels, out_channels, kernel_size, bias_shape):
        super(ModelNew, self).__init__()
        self.conv = nn.Conv2d(in_channels, out_channels, kernel_size)
        self.bias = nn.Parameter(torch.randn(bias_shape))           # (C,1,1)
        self.fused_op = relu_bias_add

    def forward(self, x):
        x = self.conv(x)
        x = self.fused_op.relu_bias_add_cuda(x, self.bias)
        return x

# -------------------------------------------------------------------------
# Helper functions (same signatures as original script)
# -------------------------------------------------------------------------
batch_size   = 32
in_channels  = 32
out_channels = 64
height = width = 64
kernel_size  = 3
bias_shape   = (out_channels, 1, 1)

def get_inputs():
    return [torch.rand(batch_size, in_channels, height, width, device="cuda")]

def get_init_inputs():
    return [in_channels, out_channels, kernel_size, bias_shape]


Follow the Rules and produce the JSON exactly in the specified format.