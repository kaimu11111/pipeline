You are given:

ERROR_LOG:
/home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/utils/cpp_extension.py:2356: UserWarning: TORCH_CUDA_ARCH_LIST is not set, all archs for visible cards are included for compilation. 
If this is not desired, please set os.environ['TORCH_CUDA_ARCH_LIST'].
  warnings.warn(
Error building extension 'fused_act': [1/3] c++ -MMD -MF main.o.d -DTORCH_EXTENSION_NAME=fused_act -DTORCH_API_INCLUDE_EXTENSION_H -DPYBIND11_COMPILER_TYPE=\"_gcc\" -DPYBIND11_STDLIB=\"_libstdcpp\" -DPYBIND11_BUILD_ABI=\"_cxxabi1016\" -isystem /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include -isystem /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/csrc/api/include -isystem /home/wan00559/miniconda3/envs/maxk/include/python3.11 -D_GLIBCXX_USE_CXX11_ABI=1 -fPIC -std=c++17 -c /home/wan00559/.cache/torch_extensions/py311_cu126/fused_act/main.cpp -o main.o 
[2/3] /usr/bin/nvcc --generate-dependencies-with-compile --dependency-output cuda.cuda.o.d -DTORCH_EXTENSION_NAME=fused_act -DTORCH_API_INCLUDE_EXTENSION_H -DPYBIND11_COMPILER_TYPE=\"_gcc\" -DPYBIND11_STDLIB=\"_libstdcpp\" -DPYBIND11_BUILD_ABI=\"_cxxabi1016\" -isystem /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include -isystem /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/csrc/api/include -isystem /home/wan00559/miniconda3/envs/maxk/include/python3.11 -D_GLIBCXX_USE_CXX11_ABI=1 -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr -gencode=arch=compute_75,code=compute_75 -gencode=arch=compute_75,code=sm_75 --compiler-options '-fPIC' -std=c++17 -c /home/wan00559/.cache/torch_extensions/py311_cu126/fused_act/cuda.cu -o cuda.cuda.o 
[3/3] c++ main.o cuda.cuda.o -shared -L/home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/lib -lc10 -lc10_cuda -ltorch_cpu -ltorch_cuda -ltorch -ltorch_python -L/usr/lib64 -lcudart -o fused_act.so
FAILED: fused_act.so 
c++ main.o cuda.cuda.o -shared -L/home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/lib -lc10 -lc10_cuda -ltorch_cpu -ltorch_cuda -ltorch -ltorch_python -L/usr/lib64 -lcudart -o fused_act.so
/usr/bin/ld: cuda.cuda.o: in function `PyInit_fused_act':
tmpxft_003cc372_00000000-6_cuda.cudafe1.cpp:(.text+0x664): multiple definition of `PyInit_fused_act'; main.o:main.cpp:(.text+0x257): first defined here
collect2: error: ld returned 1 exit status
ninja: build stopped: subcommand failed.

PyTorch reference (ground truth):

import torch
import torch.nn as nn

class Model(nn.Module):
    """
    Model that performs a convolution, subtracts a value, applies HardSwish, MaxPool, and Mish activation functions.
    """
    def __init__(self, in_channels, out_channels, kernel_size, subtract_value, pool_kernel_size):
        super(Model, self).__init__()
        self.conv = nn.Conv2d(in_channels, out_channels, kernel_size)
        self.subtract_value = subtract_value
        self.pool = nn.MaxPool2d(pool_kernel_size)

    def forward(self, x):
        x = self.conv(x)
        x = x - self.subtract_value
        x = torch.nn.functional.hardswish(x)
        x = self.pool(x)
        x = torch.nn.functional.mish(x)
        return x

batch_size = 64
in_channels = 32
out_channels =64
height = width = 64
kernel_size = 3
subtract_value = 0.5
pool_kernel_size = 2

def get_inputs():
    return [torch.rand(batch_size, in_channels, height, width)]

def get_init_inputs():
    return [in_channels, out_channels, kernel_size, subtract_value, pool_kernel_size]

CUDA candidate (to audit):

import torch
import torch.nn as nn
from torch.utils.cpp_extension import load_inline

# ------------------------------------------------------------------
# Handâ€“written CUDA kernels
# ------------------------------------------------------------------
cuda_src = r"""
#include <torch/extension.h>
#include <cuda_runtime.h>
#include <cmath>

// ------------------------------------------------------
// subtract + HardSwish kernel
// y = hardswish(x - subtract_val)
// ------------------------------------------------------
__global__ void sub_hswish_kernel(const float* __restrict__ x,
                                  float* __restrict__ y,
                                  const float subtract_val,
                                  const int64_t numel) {
    const int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < numel) {
        float v = x[idx] - subtract_val;
        float h = fminf(fmaxf(v + 3.f, 0.f), 6.f);   // relu6(v+3)
        y[idx] = v * (h / 6.f);
    }
}

// ------------------------------------------------------
// Mish kernel : y = x * tanh(softplus(x))
// ------------------------------------------------------
__global__ void mish_kernel(const float* __restrict__ x,
                            float* __restrict__ y,
                            const int64_t numel) {
    const int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < numel) {
        float v  = x[idx];
        float sp = log1pf(expf(v));          // softplus
        y[idx]   = v * tanhf(sp);
    }
}

// ------------------------------------------------------
// C++ / ATen wrappers
// ------------------------------------------------------
torch::Tensor subtract_hardswish_cuda(torch::Tensor x, const float subtract_val) {
    TORCH_CHECK(x.is_cuda(), "Input must be a CUDA tensor");
    TORCH_CHECK(x.scalar_type() == torch::kFloat, "Only float32 supported");

    auto y = torch::empty_like(x);

    const int64_t numel = x.numel();
    const int  block   = 256;
    const int  grid    = (numel + block - 1) / block;

    sub_hswish_kernel<<<grid, block>>>(
        x.data_ptr<float>(),
        y.data_ptr<float>(),
        subtract_val,
        numel
    );

    return y;
}

torch::Tensor mish_cuda(torch::Tensor x) {
    TORCH_CHECK(x.is_cuda(), "Input must be a CUDA tensor");
    TORCH_CHECK(x.scalar_type() == torch::kFloat, "Only float32 supported");

    auto y = torch::empty_like(x);

    const int64_t numel = x.numel();
    const int  block   = 256;
    const int  grid    = (numel + block - 1) / block;

    mish_kernel<<<grid, block>>>(
        x.data_ptr<float>(),
        y.data_ptr<float>(),
        numel
    );

    return y;
}

PYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {
    m.def("subtract_hardswish_cuda", &subtract_hardswish_cuda, "Subtract + HardSwish (CUDA)");
    m.def("mish_cuda", &mish_cuda, "Mish activation (CUDA)");
}
"""

cpp_decls = """
torch::Tensor subtract_hardswish_cuda(torch::Tensor x, float subtract_val);
torch::Tensor mish_cuda(torch::Tensor x);
"""

fused_act = load_inline(
    name="fused_act",
    cpp_sources=cpp_decls,
    cuda_sources=cuda_src,
    functions=["subtract_hardswish_cuda", "mish_cuda"],
    verbose=False,
)

# ------------------------------------------------------------------
# Optimised model
# ------------------------------------------------------------------
class ModelNew(nn.Module):
    """
    Optimised model using custom CUDA kernels for
    1) subtract + HardSwish
    2) Mish
    """
    def __init__(self, in_channels, out_channels, kernel_size,
                 subtract_value, pool_kernel_size):
        super().__init__()
        self.conv = nn.Conv2d(in_channels, out_channels, kernel_size)
        self.subtract_value = float(subtract_value)
        self.pool = nn.MaxPool2d(pool_kernel_size)

    def forward(self, x):
        x = self.conv(x)
        # Custom fused subtract + HardSwish
        x = fused_act.subtract_hardswish_cuda(x, self.subtract_value)
        x = self.pool(x)
        # Custom Mish
        x = fused_act.mish_cuda(x)
        return x


Follow the Rules and produce the JSON exactly in the specified format.