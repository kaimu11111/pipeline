You are given:

ERROR_LOG:
/home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/utils/cpp_extension.py:2356: UserWarning: TORCH_CUDA_ARCH_LIST is not set, all archs for visible cards are included for compilation. 
If this is not desired, please set os.environ['TORCH_CUDA_ARCH_LIST'].
  warnings.warn(
Error building extension 'fused_act_bias': [1/3] c++ -MMD -MF main.o.d -DTORCH_EXTENSION_NAME=fused_act_bias -DTORCH_API_INCLUDE_EXTENSION_H -DPYBIND11_COMPILER_TYPE=\"_gcc\" -DPYBIND11_STDLIB=\"_libstdcpp\" -DPYBIND11_BUILD_ABI=\"_cxxabi1016\" -isystem /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include -isystem /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/csrc/api/include -isystem /home/wan00559/miniconda3/envs/maxk/include/python3.11 -D_GLIBCXX_USE_CXX11_ABI=1 -fPIC -std=c++17 -c /home/wan00559/.cache/torch_extensions/py311_cu126/fused_act_bias/main.cpp -o main.o 
[2/3] /usr/bin/nvcc --generate-dependencies-with-compile --dependency-output cuda.cuda.o.d -DTORCH_EXTENSION_NAME=fused_act_bias -DTORCH_API_INCLUDE_EXTENSION_H -DPYBIND11_COMPILER_TYPE=\"_gcc\" -DPYBIND11_STDLIB=\"_libstdcpp\" -DPYBIND11_BUILD_ABI=\"_cxxabi1016\" -isystem /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include -isystem /home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/include/torch/csrc/api/include -isystem /home/wan00559/miniconda3/envs/maxk/include/python3.11 -D_GLIBCXX_USE_CXX11_ABI=1 -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr -gencode=arch=compute_75,code=compute_75 -gencode=arch=compute_75,code=sm_75 --compiler-options '-fPIC' -std=c++17 -c /home/wan00559/.cache/torch_extensions/py311_cu126/fused_act_bias/cuda.cu -o cuda.cuda.o 
[3/3] c++ main.o cuda.cuda.o -shared -L/home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/lib -lc10 -lc10_cuda -ltorch_cpu -ltorch_cuda -ltorch -ltorch_python -L/usr/lib64 -lcudart -o fused_act_bias.so
FAILED: fused_act_bias.so 
c++ main.o cuda.cuda.o -shared -L/home/wan00559/miniconda3/envs/maxk/lib/python3.11/site-packages/torch/lib -lc10 -lc10_cuda -ltorch_cpu -ltorch_cuda -ltorch -ltorch_python -L/usr/lib64 -lcudart -o fused_act_bias.so
/usr/bin/ld: cuda.cuda.o: in function `PyInit_fused_act_bias':
tmpxft_003cd9c2_00000000-6_cuda.cudafe1.cpp:(.text+0x57d): multiple definition of `PyInit_fused_act_bias'; main.o:main.cpp:(.text+0x257): first defined here
collect2: error: ld returned 1 exit status
ninja: build stopped: subcommand failed.

PyTorch reference (ground truth):

import torch
import torch.nn as nn

class Model(nn.Module):
    """
    Model that performs a 3D convolution, applies ReLU, LeakyReLU, GELU, Sigmoid activations, and bias in sequence.
    """
    def __init__(self, in_channels, out_channels, kernel_size, bias_shape):
        super(Model, self).__init__()
        self.conv = nn.Conv3d(in_channels, out_channels, kernel_size)
        self.bias = nn.Parameter(torch.randn(bias_shape)) 

    def forward(self, x):
        x = self.conv(x)
        x = torch.relu(x)
        x = torch.nn.functional.leaky_relu(x, negative_slope=0.01)
        x = torch.nn.functional.gelu(x)
        x = torch.sigmoid(x)
        x = x + self.bias
        return x

batch_size = 32
in_channels = 4
out_channels = 16
depth, height, width = 16, 32, 32
kernel_size = 3
bias_shape = (out_channels, 1, 1, 1)

def get_inputs():
    return [torch.rand(batch_size, in_channels, depth, height, width)]

def get_init_inputs():
    return [in_channels, out_channels, kernel_size, bias_shape]

CUDA candidate (to audit):

import torch
import torch.nn as nn
from torch.utils.cpp_extension import load_inline

# ------------------------------------------------------------------------------------
# Inline CUDA kernel that fuses: ReLU → LeakyReLU(0.01) → GELU → Sigmoid → +Bias
# ------------------------------------------------------------------------------------
cuda_src = r"""
#include <torch/extension.h>
#include <cuda.h>
#include <cuda_runtime.h>
#include <math.h>

__global__ void fused_act_bias_kernel(const float* __restrict__ inp,
                                      const float* __restrict__ bias,
                                      float* __restrict__ out,
                                      int channels,
                                      int inner_size,
                                      int total) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx >= total) return;

    float v = inp[idx];

    // ReLU
    v = v > 0.0f ? v : 0.0f;

    // LeakyReLU (negative_slope = 0.01)
    v = v > 0.0f ? v : 0.01f * v;

    // GELU (tanh approximation)
    const float k0 = 0.7978845608028654f;   // sqrt(2/pi)
    const float k1 = 0.044715f;
    float inner = k0 * (v + k1 * v * v * v);
    float cdf   = 0.5f * (1.0f + tanhf(inner));
    v = v * cdf;

    // Sigmoid
    v = 1.0f / (1.0f + expf(-v));

    // Add bias (broadcast over spatial dims)
    int c = (idx / inner_size) % channels;
    v += bias[c];

    out[idx] = v;
}

torch::Tensor fused_act_bias_cuda(torch::Tensor x, torch::Tensor bias) {
    TORCH_CHECK(x.is_cuda(),  "x must be a CUDA tensor");
    TORCH_CHECK(bias.is_cuda(), "bias must be a CUDA tensor");
    TORCH_CHECK(x.scalar_type() == torch::kFloat32,  "x must be float32");
    TORCH_CHECK(bias.scalar_type() == torch::kFloat32, "bias must be float32");

    auto out = torch::empty_like(x);

    int channels   = x.size(1);
    int depth      = x.size(2);
    int height     = x.size(3);
    int width      = x.size(4);
    int inner_size = depth * height * width;
    int total      = x.numel();

    const int block_size = 256;
    const int grid_size  = (total + block_size - 1) / block_size;

    fused_act_bias_kernel<<<grid_size, block_size>>>(
        x.data_ptr<float>(),
        bias.data_ptr<float>(),
        out.data_ptr<float>(),
        channels,
        inner_size,
        total
    );
    return out;
}

PYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {
    m.def("fused_act_bias_cuda", &fused_act_bias_cuda,
          "Fused ReLU + LeakyReLU + GELU + Sigmoid + Bias (CUDA)");
}
"""

cpp_decl = "torch::Tensor fused_act_bias_cuda(torch::Tensor x, torch::Tensor bias);"

fused_ops = load_inline(
    name="fused_act_bias",
    cpp_sources=cpp_decl,
    cuda_sources=cuda_src,
    functions=["fused_act_bias_cuda"],
    verbose=False,
)

# ------------------------------------------------------------------------------------
# Optimised PyTorch model using the fused CUDA kernel
# ------------------------------------------------------------------------------------
class ModelNew(nn.Module):
    """
    3D Conv followed by fused activations and bias addition implemented in a custom CUDA kernel.
    """
    def __init__(self, in_channels, out_channels, kernel_size, bias_shape):
        super().__init__()
        self.conv = nn.Conv3d(in_channels, out_channels, kernel_size)
        self.bias = nn.Parameter(torch.randn(bias_shape))
        self._fused = fused_ops

    def forward(self, x):
        x = self.conv(x)
        bias_flat = self.bias.view(-1).contiguous().to(x.device)
        x = self._fused.fused_act_bias_cuda(x, bias_flat)
        return x


# ------------------------------------------------------------------------------------
# Helper functions for benchmarking framework
# ------------------------------------------------------------------------------------
batch_size = 32
in_channels = 4
out_channels = 16
depth, height, width = 16, 32, 32
kernel_size = 3
bias_shape = (out_channels, 1, 1, 1)

def get_inputs():
    return [torch.rand(batch_size, in_channels, depth, height, width, device="cuda")]

def get_init_inputs():
    return [in_channels, out_channels, kernel_size, bias_shape]


Follow the Rules and produce the JSON exactly in the specified format.